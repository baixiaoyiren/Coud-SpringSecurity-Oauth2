server:
  port: 80
spring:
  application:
    name: gateway-server
  cloud:
    gateway:
      routes:
#        - id: login-server-route #路由id，保持唯一即可
#          uri: http://localhost:10011 # 统一资源标识符
#          predicates:
#            - Path=/login/doLogin # 匹配规则
#            filters:
#            - StripPrefix=1



        - id: login-server-route #路由id，保持唯一即可
          uri: lb://server-login # 统一资源标识符
          predicates:
            - Path=/login/doLogin # 匹配规则
          filters:
          - StripPrefix=1

        - id: server-teacher-route #路由id，保持唯一即可
          uri: lb://server-teacher # 统一资源标识符
          predicates:
            - Path=/teacher/teach # 匹配规则
          filters:
          - StripPrefix=1
#        限流规则（也可以加入自己自定义的限流规则）
          - name: RequestRateLimiter
            args:
              # 每秒允许处理的请求数量  #  令牌桶每秒填充平均速率
              redis-rate-limiter.replenishRate: 1
              # 每秒最大处理的请求数量# 令牌桶总容量
              redis-rate-limiter.burstCapacity: 1
              #限流策略，对应策略的Bean,就是我们学的bean的class名称
              key-resolver: "#{@apiKeyResolver}"



#   gateway 解决跨域问题
      globalcors: # 全局的跨域处理
        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
              - # 允许哪些网站的跨域请求
#              - "http://localhost:8090"
            allowedMethods: "*"
            # 允许的跨域ajax的请求方式
#              - "GET"
#              - "POST"
#              - "DELETE"
#              - "PUT"
#              - "OPTIONS"
            allowedHeaders: "*" # 允许在请求中携带的头信息
            allowCredentials: true # 是否允许携带cookie
            maxAge: 360000 # 这次跨域检测的有效期



      discovery:
        locator:
          lower-case-service-id: true  #  开启服务名小写功能
          enabled: true # 开启动态路由 即开启通过服务名找到服务接口的功能


eureka:
  client: # 拉取服务列表到本地
    service-url:
      #      defaultZone: http://eureka-server-001/eureka
      defaultZone: http://eureka7001.com:7001/eureka #指定注册地址

    register-with-eureka: true # 可以不往eureka注册
    fetch-registry: true # 拉取服务列表到本地
    registry-fetch-interval-seconds: 3 # 为了缓解服务列表脏读问题，时间越短 ，脏读越少，但是比较耗性能，就是每隔多久去取服务列表
  instance:
    hostname: localhost #应用名称，最好写主机
    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 10 #实例续约时间

#暴露所有的监控断端点
management:
  endpoints:
    web:
      exposure:
        include: '*'